version: 2.1

# orbs:
#   slack: Cricleci/slack@4.10.1

commands:
  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          channel: project-give-your-application-auto-deploy-superpowersdone
          template: basic_fail_1
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
  install_nodejs:
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node.js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs
  setup-pip3:
    description: Install the latest pip3 on debian-based image.
    parameters:
      when:
        type: string
        default: on_success
    steps:
      - run:
          name: Install the latest pip
          when: <<parameters.when>>
          command: |
            sudo apt -y update && sudo apt install -yy python3-pip
            pip3 install --upgrade pip
  pip3-install:
    description: Install a package or more through pip3.
    parameters:
      when:
        type: string
        default: on_success
      pkglist:
        type: string
    steps:
      - run:
          name: Install [ <<parameters.pkglist>> ] through pip3.
          when: <<parameters.when>>
          command: |
            pip3 install <<parameters.pkglist>>

  # destroy-environment:
  #   description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
  #   parameters:
  #     workflow_id:
  #       default: "${CIRCLE_WORKFLOW_ID:0:7}"
  #       type: string  
  #   steps:
  #     - run:
  #         name: Destroy environments
  #         when: on_fail
  #         command: |
  #           # Your code here 
  #           aws s3://udapeople-<<parameters.workflow_id>> --recursive
  #           aws cloudformation delete-stack --stack-name "udapeople-frontend-<<parameters.id>>"
  #           aws cloudformation delete-stack --stack-name "udapeople-backend-<<parameters.id>>"
  #         # running both deletions in parallel
            
  # revert-migrations:
  #   description: Revert the last migration if successfully run in the current workflow.
  #   parameters:
  #     # Add parameter here    
  #     workflow_id:
  #       default: "${CIRCLE_WORKFLOW_ID:0:7}"
  #       type: string  
  #   steps:
  #     - run:
  #         name: Revert migrations
  #         when: on_fail
  #         command: |
  #           # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
  #           SUCCESS = 1
  #           if(( $SUCCESS==1 )); 
  #           then
  #           #  cd ~/project/backend
  #           #  npm install
  #           #  Add revert code here. You can find this in the Getting Started section.
  #           fi
         
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps
      # - notify_on_failure
      
  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps
      # - notify_on_failure

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: front-end unit test 
          command: |
            cd frontend
            npm install
            npm test
      # - notify_on_failure
      
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end unit test
          command: |
            cd backend
            npm install
            npm test
      # - notify_on_failure
            
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: front-end scan 
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
      # - notify_on_failure

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
      # - notify_on_failure

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      # - install_awscli
#backend deploy-infrastructure
      - run:
            name: install dependencies
            command: |
              yum install -y tar gzip
      - run:        
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
#frontend deploy-infrastructure
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
#ansbile deploy-infrastructure
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible
            cat inventory.txt
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} >> inventory.txt
            cat inventory.txt

        # BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
        #   --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
        #   --query 'Reservations[*].Instances[*].PublicIpAddress' \
        #   --output text)
        # echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
        # cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
# #!/bin/bash -eo pipefail
# cd .circleci/ansible
# cat inventory.txt
# aws ec2 describe-instances \
# --query 'Reservations[*].Instances[*].PublicIpAddress' \
# --output text --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} >> inventory.txt
# cat inventory.txt
      # - destroy-environments:
      #     id: ${CIRCLE_WORKFLOW_ID:0:7}
      #     when: on_fail    

  # configure-infrastructure:
  #   docker:
  #     # Docker image here that supports Ansible
  #     - image: cimg/base:stable
  #   steps:
  #     - Checkout 
  #     - Add ssh keys:
  #         fingerprint: 'c1:dc:5c:1a:f6:bf:d5:b5:17:03:66:17:8a:95:79:79'
  #     - attach workspace:
  #         at: ~/
  #     - run:
  #         name: Configure server
  #         command: |
  #           cd .clircleci/ansible
  #           cat inventory.txt
  #           ansible-playbook -i inventory.txt Configure server.yml
  #     - destroy-environment

  # run-migrations:
  #   docker:
  #     # Docker image here that supports NodeJS
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Run migrations
  #         command: |
  #           # Your code here
  #           exit 1
  #     - run:
  #         name: Send migration results to memstash
  #         command: |
  #           # Your code here
  #           exit 1
  #    # Here's where you will add some code to rollback on failure      

  # deploy-frontend:
  #   docker:
  #     - image: cimg/base:stable
  #   steps:
  #     - checkout
  #     - install_awscli
  #     - install_nodejs
  #     - restore_cache:
  #         keys: [frontend-deps]
  #     - run:
  #         name: Install dependencies
  #         command: |
  #            cd frontend
  #            npm install
  #     - run:
  #         name: Get backend url
  #         command: |
  #           BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
  #             --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #             --output text)
  #           echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
  #           cat frontend/.env
  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           cd frontend
  #           npm run build
  #           aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
  #     - destroy-environment
  #     - revert-migrations
                    
  # deploy-backend:
  #   docker:
  #     # Docker image here that supports Ansible
  #   steps:
  #     # Checkout code from git
  #     # Add ssh keys with fingerprint
  #     # attach workspace
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

  # smoke-test:
  #   docker:
  #     # Lightweight Docker image 
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           # your code here
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

  # cloudfront-update:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           # your code here
  #         # Here's where you will add some code to rollback on failure  

  # cleanup:
  #     docker:
  #       # Docker image here
  #     steps:
  #       # Checkout code from git
  #       - run:
  #           name: Get old stack workflow id
  #           command: |
  #             # your code here
  #             export OldWorkflowID="the id here"
  #             export STACKS=[] #put the list of stacks here
  #       - run:
  #           name: Remove old stacks and files
  #           command: |
  #             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
  #             then
  #               # your code here
  #             fi
  # notify_on_success:
  #   docker:
  #     - image: cimg/base:stable
  #   steps:
  #     - slack/notify:
  #         event: pass
  #         channel: project-give-your-application-auto-deploy-superpowersdone
  #         template: success_tagged_deployments_1

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      # - notify_on_success:
      #     requires:
      #       - test-frontend
      #       - test-backend
      #       - scan-backend
      #       - scan-frontend

      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]